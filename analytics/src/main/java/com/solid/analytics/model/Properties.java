/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.solid.analytics.model;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import java.util.Enumeration;

import org.json.*;

import com.solid.analytics.thrift.*;
import com.solid.analytics.thrift.meta_data.*;
import com.solid.analytics.thrift.transport.*;
import com.solid.analytics.thrift.protocol.*;

public class Properties implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("");

  private static final TField PROPERTIES_FIELD_DESC = new TField("5196ED9D6E7A8ABBFBC73062FD534E2F", TType.MAP, (short)1);

  private Hashtable properties;

  // isset id assignments

  public Properties() {
  }

  public Properties(
    Hashtable properties)
  {
    this();
    this.properties = properties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Properties(Properties other) {
    if (other.isSetProperties()) {
      Hashtable __this__properties = new Hashtable();
      for (Enumeration other_enum = other.properties.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        String other_element_value = (String)other.properties.get(other_element_key);

        String __this__properties_copy_key = other_element_key;

        String __this__properties_copy_value = other_element_value;

        __this__properties.put(__this__properties_copy_key, __this__properties_copy_value);
      }
      this.properties = __this__properties;
    }
  }

  public Properties deepCopy() {
    return new Properties(this);
  }

  public void clear() {
    this.properties = null;
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new Hashtable();
    }
    this.properties.put(key, val);
  }

  public Hashtable getProperties() {
    return this.properties;
  }

  public void setProperties(Hashtable properties) {
    this.properties = properties;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Properties)
      return this.equals((Properties)that);
    return false;
  }

  public boolean equals(Properties that) {
    if (that == null)
      return false;

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    Properties other = (Properties)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PROPERTIES
          if (field.type == TType.MAP) {
            {
              TMap _map22 = iprot.readMapBegin();
              this.properties = new Hashtable(2*_map22.size);
              for (int _i23 = 0; _i23 < _map22.size; ++_i23)
              {
                String _key24;
                String _val25;
                _key24 = iprot.readString();
                _val25 = iprot.readString();
                this.properties.put(_key24, _val25);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.properties != null) {
      oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.properties.size()));
        for (Enumeration _iter26_enum = this.properties.keys(); _iter26_enum.hasMoreElements(); )         {
          String _iter26 = (String)_iter26_enum.nextElement();
          oprot.writeString(_iter26);
          oprot.writeString(((String)this.properties.get(_iter26)));
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public void validate() throws TException {
    // check for required fields
  }

  public void read(JSONObject obj) throws TException {
    validate();

    try {
      if (obj.has(PROPERTIES_FIELD_DESC.name())) {
        {
          JSONObject _map27 = obj.optJSONObject(PROPERTIES_FIELD_DESC.name());
          this.properties = new Hashtable(2*_map27.length());
          Iterator<String> _iter28 = _map27.keys();
          while (_iter28.hasNext())
          {
            String _key30 = _iter28.next();
            String _key32;
            String _val33;
            _key32 = _key30;
            _val33 = _map27.optString(_key30);
            this.properties.put(_key32, _val33);
          }
        }
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

  public void write(JSONObject obj) throws TException {
    validate();

    try {
      if (this.properties != null) {
        JSONObject v_properties = new JSONObject();
        for (Enumeration _iter34_enum = this.properties.keys(); _iter34_enum.hasMoreElements(); )         {
          String _iter34 = (String)_iter34_enum.nextElement();
          String _iter34_value = ((String)this.properties.get(_iter34));
          Object _iter34_value_json = _iter34_value;
          v_properties.put(_iter34, _iter34_value_json);
        }
        obj.put(PROPERTIES_FIELD_DESC.name(), v_properties);
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

}

