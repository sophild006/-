/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.solid.analytics.model;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import java.util.Enumeration;

import org.json.*;

import com.solid.analytics.thrift.*;
import com.solid.analytics.thrift.meta_data.*;
import com.solid.analytics.thrift.transport.*;
import com.solid.analytics.thrift.protocol.*;

public class Event implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("");

  private static final TField CATEGORY_FIELD_DESC = new TField("A088104124FBC864F9A717A1D670ADF7", TType.STRING, (short)1);
  private static final TField EVENT_CODE_FIELD_DESC = new TField("4CE17BC1CB9F04609926DF3AEA065024", TType.STRING, (short)2);
  private static final TField LABEL_FIELD_DESC = new TField("A47074F557BF24B278912AB180A02B8B", TType.STRING, (short)3);
  private static final TField VALUE_FIELD_DESC = new TField("DCA77847CD1FE9966C0F581AAE4B956A", TType.STRING, (short)4);
  private static final TField EXTRA_FIELD_DESC = new TField("A0E6EF1779A233086B6274891DCD8050", TType.STRING, (short)5);
  private static final TField CREATED_FIELD_DESC = new TField("A097B36A71479829165AE03FC056B71A", TType.STRING, (short)6);
  private static final TField EVENT_OCCURRED_VER_FIELD_DESC = new TField("68ECB59370E45253FC135ADF5B5FAEC9BE63611BFE7F6A7B958841AFB83E9CE8", TType.I32, (short)7);

  private String category;
  private String event_code;
  private String label;
  private String value;
  private String extra;
  private String created;
  private int event_occurred_ver;

  // isset id assignments
  private static final int __EVENT_OCCURRED_VER_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public Event() {
  }

  public Event(
    String category,
    String event_code,
    String label,
    String value,
    String extra,
    String created,
    int event_occurred_ver)
  {
    this();
    this.category = category;
    this.event_code = event_code;
    this.label = label;
    this.value = value;
    this.extra = extra;
    this.created = created;
    this.event_occurred_ver = event_occurred_ver;
    setEvent_occurred_verIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Event(Event other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetEvent_code()) {
      this.event_code = other.event_code;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetExtra()) {
      this.extra = other.extra;
    }
    if (other.isSetCreated()) {
      this.created = other.created;
    }
    this.event_occurred_ver = other.event_occurred_ver;
  }

  public Event deepCopy() {
    return new Event(this);
  }

  public void clear() {
    this.category = null;
    this.event_code = null;
    this.label = null;
    this.value = null;
    this.extra = null;
    this.created = null;
    setEvent_occurred_verIsSet(false);
    this.event_occurred_ver = 0;
  }

  public String getCategory() {
    return this.category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getEvent_code() {
    return this.event_code;
  }

  public void setEvent_code(String event_code) {
    this.event_code = event_code;
  }

  public void unsetEvent_code() {
    this.event_code = null;
  }

  /** Returns true if field event_code is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_code() {
    return this.event_code != null;
  }

  public void setEvent_codeIsSet(boolean value) {
    if (!value) {
      this.event_code = null;
    }
  }

  public String getLabel() {
    return this.label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public String getValue() {
    return this.value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public String getExtra() {
    return this.extra;
  }

  public void setExtra(String extra) {
    this.extra = extra;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  public String getCreated() {
    return this.created;
  }

  public void setCreated(String created) {
    this.created = created;
  }

  public void unsetCreated() {
    this.created = null;
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return this.created != null;
  }

  public void setCreatedIsSet(boolean value) {
    if (!value) {
      this.created = null;
    }
  }

  public int getEvent_occurred_ver() {
    return this.event_occurred_ver;
  }

  public void setEvent_occurred_ver(int event_occurred_ver) {
    this.event_occurred_ver = event_occurred_ver;
    setEvent_occurred_verIsSet(true);
  }

  public void unsetEvent_occurred_ver() {
    __isset_vector[__EVENT_OCCURRED_VER_ISSET_ID] = false;
  }

  /** Returns true if field event_occurred_ver is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_occurred_ver() {
    return __isset_vector[__EVENT_OCCURRED_VER_ISSET_ID];
  }

  public void setEvent_occurred_verIsSet(boolean value) {
    __isset_vector[__EVENT_OCCURRED_VER_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Event)
      return this.equals((Event)that);
    return false;
  }

  public boolean equals(Event that) {
    if (that == null)
      return false;

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_event_code = true && this.isSetEvent_code();
    boolean that_present_event_code = true && that.isSetEvent_code();
    if (this_present_event_code || that_present_event_code) {
      if (!(this_present_event_code && that_present_event_code))
        return false;
      if (!this.event_code.equals(that.event_code))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    boolean this_present_created = true && this.isSetCreated();
    boolean that_present_created = true && that.isSetCreated();
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (!this.created.equals(that.created))
        return false;
    }

    boolean this_present_event_occurred_ver = true;
    boolean that_present_event_occurred_ver = true;
    if (this_present_event_occurred_ver || that_present_event_occurred_ver) {
      if (!(this_present_event_occurred_ver && that_present_event_occurred_ver))
        return false;
      if (this.event_occurred_ver != that.event_occurred_ver)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    Event other = (Event)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetCategory(), other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEvent_code(), other.isSetEvent_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_code()) {
      lastComparison = TBaseHelper.compareTo(this.event_code, other.event_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLabel(), other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetValue(), other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetExtra(), other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = TBaseHelper.compareTo(this.extra, other.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCreated(), other.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = TBaseHelper.compareTo(this.created, other.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEvent_occurred_ver(), other.isSetEvent_occurred_ver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_occurred_ver()) {
      lastComparison = TBaseHelper.compareTo(this.event_occurred_ver, other.event_occurred_ver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CATEGORY
          if (field.type == TType.STRING) {
            this.category = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // EVENT_CODE
          if (field.type == TType.STRING) {
            this.event_code = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LABEL
          if (field.type == TType.STRING) {
            this.label = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // VALUE
          if (field.type == TType.STRING) {
            this.value = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // EXTRA
          if (field.type == TType.STRING) {
            this.extra = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CREATED
          if (field.type == TType.STRING) {
            this.created = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // EVENT_OCCURRED_VER
          if (field.type == TType.I32) {
            this.event_occurred_ver = iprot.readI32();
            setEvent_occurred_verIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.category != null) {
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeString(this.category);
      oprot.writeFieldEnd();
    }
    if (this.event_code != null) {
      oprot.writeFieldBegin(EVENT_CODE_FIELD_DESC);
      oprot.writeString(this.event_code);
      oprot.writeFieldEnd();
    }
    if (this.label != null) {
      oprot.writeFieldBegin(LABEL_FIELD_DESC);
      oprot.writeString(this.label);
      oprot.writeFieldEnd();
    }
    if (this.value != null) {
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeString(this.value);
      oprot.writeFieldEnd();
    }
    if (this.extra != null) {
      oprot.writeFieldBegin(EXTRA_FIELD_DESC);
      oprot.writeString(this.extra);
      oprot.writeFieldEnd();
    }
    if (this.created != null) {
      oprot.writeFieldBegin(CREATED_FIELD_DESC);
      oprot.writeString(this.created);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EVENT_OCCURRED_VER_FIELD_DESC);
    oprot.writeI32(this.event_occurred_ver);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public void validate() throws TException {
    // check for required fields
  }

  public void read(JSONObject obj) throws TException {
    validate();

    try {
      if (obj.has(CATEGORY_FIELD_DESC.name())) {
        this.category = obj.optString(CATEGORY_FIELD_DESC.name());
      }
      if (obj.has(EVENT_CODE_FIELD_DESC.name())) {
        this.event_code = obj.optString(EVENT_CODE_FIELD_DESC.name());
      }
      if (obj.has(LABEL_FIELD_DESC.name())) {
        this.label = obj.optString(LABEL_FIELD_DESC.name());
      }
      if (obj.has(VALUE_FIELD_DESC.name())) {
        this.value = obj.optString(VALUE_FIELD_DESC.name());
      }
      if (obj.has(EXTRA_FIELD_DESC.name())) {
        this.extra = obj.optString(EXTRA_FIELD_DESC.name());
      }
      if (obj.has(CREATED_FIELD_DESC.name())) {
        this.created = obj.optString(CREATED_FIELD_DESC.name());
      }
      if (obj.has(EVENT_OCCURRED_VER_FIELD_DESC.name())) {
        this.event_occurred_ver = obj.optInt(EVENT_OCCURRED_VER_FIELD_DESC.name());
        setEvent_occurred_verIsSet(true);
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

  public void write(JSONObject obj) throws TException {
    validate();

    try {
      if (this.category != null) {
        Object v_category = this.category;
        obj.put(CATEGORY_FIELD_DESC.name(), v_category);
      }
      if (this.event_code != null) {
        Object v_event_code = this.event_code;
        obj.put(EVENT_CODE_FIELD_DESC.name(), v_event_code);
      }
      if (this.label != null) {
        Object v_label = this.label;
        obj.put(LABEL_FIELD_DESC.name(), v_label);
      }
      if (this.value != null) {
        Object v_value = this.value;
        obj.put(VALUE_FIELD_DESC.name(), v_value);
      }
      if (this.extra != null) {
        Object v_extra = this.extra;
        obj.put(EXTRA_FIELD_DESC.name(), v_extra);
      }
      if (this.created != null) {
        Object v_created = this.created;
        obj.put(CREATED_FIELD_DESC.name(), v_created);
      }
      Object v_event_occurred_ver = this.event_occurred_ver;
      obj.put(EVENT_OCCURRED_VER_FIELD_DESC.name(), v_event_occurred_ver);
    } catch (Exception e) {
        throw new TException(e);
    }
  }

}

