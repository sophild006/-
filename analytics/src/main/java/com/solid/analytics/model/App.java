/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.solid.analytics.model;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import java.util.Enumeration;

import org.json.*;

import com.solid.analytics.thrift.*;
import com.solid.analytics.thrift.meta_data.*;
import com.solid.analytics.thrift.transport.*;
import com.solid.analytics.thrift.protocol.*;

public class App implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("");

  private static final TField VER_FIELD_DESC = new TField("C8933E82BCBD71E7B8764CD3AF863200", TType.I32, (short)1);
  private static final TField FI_FIELD_DESC = new TField("3DC047A31E5ADE47E304DC38B5DB88B6", TType.I64, (short)2);
  private static final TField LU_FIELD_DESC = new TField("16D0C23A975B646DBC8D45BF7605E2D9", TType.I64, (short)3);
  private static final TField AF_FIELD_DESC = new TField("EDE54E421A7DD4FA9D9BFA600E45D938", TType.I32, (short)4);

  private int ver;
  private long fi;
  private long lu;
  private int af;

  // isset id assignments
  private static final int __VER_ISSET_ID = 0;
  private static final int __FI_ISSET_ID = 1;
  private static final int __LU_ISSET_ID = 2;
  private static final int __AF_ISSET_ID = 3;
  private boolean[] __isset_vector = new boolean[4];

  public App() {
  }

  public App(
    int ver,
    long fi,
    long lu,
    int af)
  {
    this();
    this.ver = ver;
    setVerIsSet(true);
    this.fi = fi;
    setFiIsSet(true);
    this.lu = lu;
    setLuIsSet(true);
    this.af = af;
    setAfIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public App(App other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.ver = other.ver;
    this.fi = other.fi;
    this.lu = other.lu;
    this.af = other.af;
  }

  public App deepCopy() {
    return new App(this);
  }

  public void clear() {
    setVerIsSet(false);
    this.ver = 0;
    setFiIsSet(false);
    this.fi = 0;
    setLuIsSet(false);
    this.lu = 0;
    setAfIsSet(false);
    this.af = 0;
  }

  public int getVer() {
    return this.ver;
  }

  public void setVer(int ver) {
    this.ver = ver;
    setVerIsSet(true);
  }

  public void unsetVer() {
    __isset_vector[__VER_ISSET_ID] = false;
  }

  /** Returns true if field ver is set (has been assigned a value) and false otherwise */
  public boolean isSetVer() {
    return __isset_vector[__VER_ISSET_ID];
  }

  public void setVerIsSet(boolean value) {
    __isset_vector[__VER_ISSET_ID] = value;
  }

  public long getFi() {
    return this.fi;
  }

  public void setFi(long fi) {
    this.fi = fi;
    setFiIsSet(true);
  }

  public void unsetFi() {
    __isset_vector[__FI_ISSET_ID] = false;
  }

  /** Returns true if field fi is set (has been assigned a value) and false otherwise */
  public boolean isSetFi() {
    return __isset_vector[__FI_ISSET_ID];
  }

  public void setFiIsSet(boolean value) {
    __isset_vector[__FI_ISSET_ID] = value;
  }

  public long getLu() {
    return this.lu;
  }

  public void setLu(long lu) {
    this.lu = lu;
    setLuIsSet(true);
  }

  public void unsetLu() {
    __isset_vector[__LU_ISSET_ID] = false;
  }

  /** Returns true if field lu is set (has been assigned a value) and false otherwise */
  public boolean isSetLu() {
    return __isset_vector[__LU_ISSET_ID];
  }

  public void setLuIsSet(boolean value) {
    __isset_vector[__LU_ISSET_ID] = value;
  }

  public int getAf() {
    return this.af;
  }

  public void setAf(int af) {
    this.af = af;
    setAfIsSet(true);
  }

  public void unsetAf() {
    __isset_vector[__AF_ISSET_ID] = false;
  }

  /** Returns true if field af is set (has been assigned a value) and false otherwise */
  public boolean isSetAf() {
    return __isset_vector[__AF_ISSET_ID];
  }

  public void setAfIsSet(boolean value) {
    __isset_vector[__AF_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof App)
      return this.equals((App)that);
    return false;
  }

  public boolean equals(App that) {
    if (that == null)
      return false;

    boolean this_present_ver = true;
    boolean that_present_ver = true;
    if (this_present_ver || that_present_ver) {
      if (!(this_present_ver && that_present_ver))
        return false;
      if (this.ver != that.ver)
        return false;
    }

    boolean this_present_fi = true;
    boolean that_present_fi = true;
    if (this_present_fi || that_present_fi) {
      if (!(this_present_fi && that_present_fi))
        return false;
      if (this.fi != that.fi)
        return false;
    }

    boolean this_present_lu = true;
    boolean that_present_lu = true;
    if (this_present_lu || that_present_lu) {
      if (!(this_present_lu && that_present_lu))
        return false;
      if (this.lu != that.lu)
        return false;
    }

    boolean this_present_af = true;
    boolean that_present_af = true;
    if (this_present_af || that_present_af) {
      if (!(this_present_af && that_present_af))
        return false;
      if (this.af != that.af)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    App other = (App)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetVer(), other.isSetVer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVer()) {
      lastComparison = TBaseHelper.compareTo(this.ver, other.ver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFi(), other.isSetFi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFi()) {
      lastComparison = TBaseHelper.compareTo(this.fi, other.fi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLu(), other.isSetLu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLu()) {
      lastComparison = TBaseHelper.compareTo(this.lu, other.lu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAf(), other.isSetAf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAf()) {
      lastComparison = TBaseHelper.compareTo(this.af, other.af);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // VER
          if (field.type == TType.I32) {
            this.ver = iprot.readI32();
            setVerIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FI
          if (field.type == TType.I64) {
            this.fi = iprot.readI64();
            setFiIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LU
          if (field.type == TType.I64) {
            this.lu = iprot.readI64();
            setLuIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // AF
          if (field.type == TType.I32) {
            this.af = iprot.readI32();
            setAfIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(VER_FIELD_DESC);
    oprot.writeI32(this.ver);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FI_FIELD_DESC);
    oprot.writeI64(this.fi);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LU_FIELD_DESC);
    oprot.writeI64(this.lu);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(AF_FIELD_DESC);
    oprot.writeI32(this.af);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public void validate() throws TException {
    // check for required fields
  }

  public void read(JSONObject obj) throws TException {
    validate();

    try {
      if (obj.has(VER_FIELD_DESC.name())) {
        this.ver = obj.optInt(VER_FIELD_DESC.name());
        setVerIsSet(true);
      }
      if (obj.has(FI_FIELD_DESC.name())) {
        this.fi = obj.optLong(FI_FIELD_DESC.name());
        setFiIsSet(true);
      }
      if (obj.has(LU_FIELD_DESC.name())) {
        this.lu = obj.optLong(LU_FIELD_DESC.name());
        setLuIsSet(true);
      }
      if (obj.has(AF_FIELD_DESC.name())) {
        this.af = obj.optInt(AF_FIELD_DESC.name());
        setAfIsSet(true);
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

  public void write(JSONObject obj) throws TException {
    validate();

    try {
      Object v_ver = this.ver;
      obj.put(VER_FIELD_DESC.name(), v_ver);
      Object v_fi = this.fi;
      obj.put(FI_FIELD_DESC.name(), v_fi);
      Object v_lu = this.lu;
      obj.put(LU_FIELD_DESC.name(), v_lu);
      Object v_af = this.af;
      obj.put(AF_FIELD_DESC.name(), v_af);
    } catch (Exception e) {
        throw new TException(e);
    }
  }

}

