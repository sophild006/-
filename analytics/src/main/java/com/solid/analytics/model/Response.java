/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.solid.analytics.model;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import java.util.Enumeration;

import org.json.*;

import com.solid.analytics.thrift.*;
import com.solid.analytics.thrift.meta_data.*;
import com.solid.analytics.thrift.transport.*;
import com.solid.analytics.thrift.protocol.*;

public class Response implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("");

  private static final TField RET_FIELD_DESC = new TField("6DDEE0FF84F5144E4C839F8A5B588167", TType.I32, (short)1);
  private static final TField ERRINFO_FIELD_DESC = new TField("0D5C8231DF345892655B73FC60BA49D0", TType.STRING, (short)2);
  private static final TField UID_FIELD_DESC = new TField("0E70DE63DD91EADD76AE3A85A75C9800", TType.I64, (short)3);

  private int ret;
  private String errinfo;
  private long uid;

  // isset id assignments
  private static final int __RET_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public Response() {
    this.ret = -1;

  }

  public Response(
    int ret,
    String errinfo,
    long uid)
  {
    this();
    this.ret = ret;
    setRetIsSet(true);
    this.errinfo = errinfo;
    this.uid = uid;
    setUidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Response(Response other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.ret = other.ret;
    if (other.isSetErrinfo()) {
      this.errinfo = other.errinfo;
    }
    this.uid = other.uid;
  }

  public Response deepCopy() {
    return new Response(this);
  }

  public void clear() {
    this.ret = -1;

    this.errinfo = null;
    setUidIsSet(false);
    this.uid = 0;
  }

  public int getRet() {
    return this.ret;
  }

  public void setRet(int ret) {
    this.ret = ret;
    setRetIsSet(true);
  }

  public void unsetRet() {
    __isset_vector[__RET_ISSET_ID] = false;
  }

  /** Returns true if field ret is set (has been assigned a value) and false otherwise */
  public boolean isSetRet() {
    return __isset_vector[__RET_ISSET_ID];
  }

  public void setRetIsSet(boolean value) {
    __isset_vector[__RET_ISSET_ID] = value;
  }

  public String getErrinfo() {
    return this.errinfo;
  }

  public void setErrinfo(String errinfo) {
    this.errinfo = errinfo;
  }

  public void unsetErrinfo() {
    this.errinfo = null;
  }

  /** Returns true if field errinfo is set (has been assigned a value) and false otherwise */
  public boolean isSetErrinfo() {
    return this.errinfo != null;
  }

  public void setErrinfoIsSet(boolean value) {
    if (!value) {
      this.errinfo = null;
    }
  }

  public long getUid() {
    return this.uid;
  }

  public void setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
  }

  public void unsetUid() {
    __isset_vector[__UID_ISSET_ID] = false;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return __isset_vector[__UID_ISSET_ID];
  }

  public void setUidIsSet(boolean value) {
    __isset_vector[__UID_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Response)
      return this.equals((Response)that);
    return false;
  }

  public boolean equals(Response that) {
    if (that == null)
      return false;

    boolean this_present_ret = true;
    boolean that_present_ret = true;
    if (this_present_ret || that_present_ret) {
      if (!(this_present_ret && that_present_ret))
        return false;
      if (this.ret != that.ret)
        return false;
    }

    boolean this_present_errinfo = true && this.isSetErrinfo();
    boolean that_present_errinfo = true && that.isSetErrinfo();
    if (this_present_errinfo || that_present_errinfo) {
      if (!(this_present_errinfo && that_present_errinfo))
        return false;
      if (!this.errinfo.equals(that.errinfo))
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    Response other = (Response)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetRet(), other.isSetRet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRet()) {
      lastComparison = TBaseHelper.compareTo(this.ret, other.ret);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetErrinfo(), other.isSetErrinfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrinfo()) {
      lastComparison = TBaseHelper.compareTo(this.errinfo, other.errinfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetUid(), other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // RET
          if (field.type == TType.I32) {
            this.ret = iprot.readI32();
            setRetIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ERRINFO
          if (field.type == TType.STRING) {
            this.errinfo = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // UID
          if (field.type == TType.I64) {
            this.uid = iprot.readI64();
            setUidIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(RET_FIELD_DESC);
    oprot.writeI32(this.ret);
    oprot.writeFieldEnd();
    if (this.errinfo != null) {
      oprot.writeFieldBegin(ERRINFO_FIELD_DESC);
      oprot.writeString(this.errinfo);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(UID_FIELD_DESC);
    oprot.writeI64(this.uid);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public void validate() throws TException {
    // check for required fields
  }

  public void read(JSONObject obj) throws TException {
    validate();

    try {
      if (obj.has(RET_FIELD_DESC.name())) {
        this.ret = obj.optInt(RET_FIELD_DESC.name());
        setRetIsSet(true);
      }
      if (obj.has(ERRINFO_FIELD_DESC.name())) {
        this.errinfo = obj.optString(ERRINFO_FIELD_DESC.name());
      }
      if (obj.has(UID_FIELD_DESC.name())) {
        this.uid = obj.optLong(UID_FIELD_DESC.name());
        setUidIsSet(true);
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

  public void write(JSONObject obj) throws TException {
    validate();

    try {
      Object v_ret = this.ret;
      obj.put(RET_FIELD_DESC.name(), v_ret);
      if (this.errinfo != null) {
        Object v_errinfo = this.errinfo;
        obj.put(ERRINFO_FIELD_DESC.name(), v_errinfo);
      }
      Object v_uid = this.uid;
      obj.put(UID_FIELD_DESC.name(), v_uid);
    } catch (Exception e) {
        throw new TException(e);
    }
  }

}

