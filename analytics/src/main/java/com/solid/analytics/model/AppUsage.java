/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.solid.analytics.model;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import java.util.Enumeration;

import org.json.*;

import com.solid.analytics.thrift.*;
import com.solid.analytics.thrift.meta_data.*;
import com.solid.analytics.thrift.transport.*;
import com.solid.analytics.thrift.protocol.*;

public class AppUsage implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("");

  private static final TField BT_FIELD_DESC = new TField("B1053DA0A6DF16AE582B50758D66ED0B", TType.I64, (short)1);
  private static final TField ET_FIELD_DESC = new TField("432349058A296A87E1C6073808BE5E8B", TType.I64, (short)2);
  private static final TField FTT_FIELD_DESC = new TField("0B274202AFC9B0D213FF07CD1BB8A960", TType.I64, (short)3);
  private static final TField LC_FIELD_DESC = new TField("B528CC0D51F39678EB6404050A29AD7A", TType.I32, (short)4);

  private long bt;
  private long et;
  private long ftt;
  private int lc;

  // isset id assignments
  private static final int __BT_ISSET_ID = 0;
  private static final int __ET_ISSET_ID = 1;
  private static final int __FTT_ISSET_ID = 2;
  private static final int __LC_ISSET_ID = 3;
  private boolean[] __isset_vector = new boolean[4];

  public AppUsage() {
  }

  public AppUsage(
    long bt,
    long et,
    long ftt,
    int lc)
  {
    this();
    this.bt = bt;
    setBtIsSet(true);
    this.et = et;
    setEtIsSet(true);
    this.ftt = ftt;
    setFttIsSet(true);
    this.lc = lc;
    setLcIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppUsage(AppUsage other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.bt = other.bt;
    this.et = other.et;
    this.ftt = other.ftt;
    this.lc = other.lc;
  }

  public AppUsage deepCopy() {
    return new AppUsage(this);
  }

  public void clear() {
    setBtIsSet(false);
    this.bt = 0;
    setEtIsSet(false);
    this.et = 0;
    setFttIsSet(false);
    this.ftt = 0;
    setLcIsSet(false);
    this.lc = 0;
  }

  public long getBt() {
    return this.bt;
  }

  public void setBt(long bt) {
    this.bt = bt;
    setBtIsSet(true);
  }

  public void unsetBt() {
    __isset_vector[__BT_ISSET_ID] = false;
  }

  /** Returns true if field bt is set (has been assigned a value) and false otherwise */
  public boolean isSetBt() {
    return __isset_vector[__BT_ISSET_ID];
  }

  public void setBtIsSet(boolean value) {
    __isset_vector[__BT_ISSET_ID] = value;
  }

  public long getEt() {
    return this.et;
  }

  public void setEt(long et) {
    this.et = et;
    setEtIsSet(true);
  }

  public void unsetEt() {
    __isset_vector[__ET_ISSET_ID] = false;
  }

  /** Returns true if field et is set (has been assigned a value) and false otherwise */
  public boolean isSetEt() {
    return __isset_vector[__ET_ISSET_ID];
  }

  public void setEtIsSet(boolean value) {
    __isset_vector[__ET_ISSET_ID] = value;
  }

  public long getFtt() {
    return this.ftt;
  }

  public void setFtt(long ftt) {
    this.ftt = ftt;
    setFttIsSet(true);
  }

  public void unsetFtt() {
    __isset_vector[__FTT_ISSET_ID] = false;
  }

  /** Returns true if field ftt is set (has been assigned a value) and false otherwise */
  public boolean isSetFtt() {
    return __isset_vector[__FTT_ISSET_ID];
  }

  public void setFttIsSet(boolean value) {
    __isset_vector[__FTT_ISSET_ID] = value;
  }

  public int getLc() {
    return this.lc;
  }

  public void setLc(int lc) {
    this.lc = lc;
    setLcIsSet(true);
  }

  public void unsetLc() {
    __isset_vector[__LC_ISSET_ID] = false;
  }

  /** Returns true if field lc is set (has been assigned a value) and false otherwise */
  public boolean isSetLc() {
    return __isset_vector[__LC_ISSET_ID];
  }

  public void setLcIsSet(boolean value) {
    __isset_vector[__LC_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppUsage)
      return this.equals((AppUsage)that);
    return false;
  }

  public boolean equals(AppUsage that) {
    if (that == null)
      return false;

    boolean this_present_bt = true;
    boolean that_present_bt = true;
    if (this_present_bt || that_present_bt) {
      if (!(this_present_bt && that_present_bt))
        return false;
      if (this.bt != that.bt)
        return false;
    }

    boolean this_present_et = true;
    boolean that_present_et = true;
    if (this_present_et || that_present_et) {
      if (!(this_present_et && that_present_et))
        return false;
      if (this.et != that.et)
        return false;
    }

    boolean this_present_ftt = true;
    boolean that_present_ftt = true;
    if (this_present_ftt || that_present_ftt) {
      if (!(this_present_ftt && that_present_ftt))
        return false;
      if (this.ftt != that.ftt)
        return false;
    }

    boolean this_present_lc = true;
    boolean that_present_lc = true;
    if (this_present_lc || that_present_lc) {
      if (!(this_present_lc && that_present_lc))
        return false;
      if (this.lc != that.lc)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    AppUsage other = (AppUsage)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetBt(), other.isSetBt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBt()) {
      lastComparison = TBaseHelper.compareTo(this.bt, other.bt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEt(), other.isSetEt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEt()) {
      lastComparison = TBaseHelper.compareTo(this.et, other.et);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFtt(), other.isSetFtt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtt()) {
      lastComparison = TBaseHelper.compareTo(this.ftt, other.ftt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLc(), other.isSetLc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLc()) {
      lastComparison = TBaseHelper.compareTo(this.lc, other.lc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // BT
          if (field.type == TType.I64) {
            this.bt = iprot.readI64();
            setBtIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ET
          if (field.type == TType.I64) {
            this.et = iprot.readI64();
            setEtIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FTT
          if (field.type == TType.I64) {
            this.ftt = iprot.readI64();
            setFttIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LC
          if (field.type == TType.I32) {
            this.lc = iprot.readI32();
            setLcIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(BT_FIELD_DESC);
    oprot.writeI64(this.bt);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ET_FIELD_DESC);
    oprot.writeI64(this.et);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FTT_FIELD_DESC);
    oprot.writeI64(this.ftt);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LC_FIELD_DESC);
    oprot.writeI32(this.lc);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public void validate() throws TException {
    // check for required fields
  }

  public void read(JSONObject obj) throws TException {
    validate();

    try {
      if (obj.has(BT_FIELD_DESC.name())) {
        this.bt = obj.optLong(BT_FIELD_DESC.name());
        setBtIsSet(true);
      }
      if (obj.has(ET_FIELD_DESC.name())) {
        this.et = obj.optLong(ET_FIELD_DESC.name());
        setEtIsSet(true);
      }
      if (obj.has(FTT_FIELD_DESC.name())) {
        this.ftt = obj.optLong(FTT_FIELD_DESC.name());
        setFttIsSet(true);
      }
      if (obj.has(LC_FIELD_DESC.name())) {
        this.lc = obj.optInt(LC_FIELD_DESC.name());
        setLcIsSet(true);
      }
    } catch (Exception e) {
        throw new TException(e);
    }
  }

  public void write(JSONObject obj) throws TException {
    validate();

    try {
      Object v_bt = this.bt;
      obj.put(BT_FIELD_DESC.name(), v_bt);
      Object v_et = this.et;
      obj.put(ET_FIELD_DESC.name(), v_et);
      Object v_ftt = this.ftt;
      obj.put(FTT_FIELD_DESC.name(), v_ftt);
      Object v_lc = this.lc;
      obj.put(LC_FIELD_DESC.name(), v_lc);
    } catch (Exception e) {
        throw new TException(e);
    }
  }

}

